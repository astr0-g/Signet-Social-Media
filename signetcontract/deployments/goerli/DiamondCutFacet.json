{
  "address": "0xa040d0ef4520A48FeCC33ad7B8C7EF86789Dc874",
  "abi": [
    {
      "inputs": [],
      "name": "EmptyCalldata",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        }
      ],
      "name": "ImmutableFunction",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InValidFacetCutAction",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InitCallFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MustBeZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoCode",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoSelectorsInFacet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NonEmptyCalldata",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        }
      ],
      "name": "NonExistentSelector",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotDiamondOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        }
      ],
      "name": "SameSelectorReplacement",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        }
      ],
      "name": "SelectorExists",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCut.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "indexed": false,
          "internalType": "struct IDiamondCut.FacetCut[]",
          "name": "_diamondCut",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_init",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_calldata",
          "type": "bytes"
        }
      ],
      "name": "DiamondCut",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCut.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondCut.FacetCut[]",
          "name": "_diamondCut",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "_init",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_calldata",
          "type": "bytes"
        }
      ],
      "name": "diamondCut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa45b5cf6afcc447e3612e1ce0b9b710bd9ef50dffc317610f62e346a20f1b5e8",
  "receipt": {
    "to": null,
    "from": "0x2F327B602B7d440C107E833481e20cC8E768458c",
    "contractAddress": "0xa040d0ef4520A48FeCC33ad7B8C7EF86789Dc874",
    "transactionIndex": 1,
    "gasUsed": "1785899",
    "logsBloom": "0x
    "blockHash": "0xe61f89dbe2b7eed9eeaedda140108d867b8208e587e3a0fd51f1f92bb99b2dc0",
    "transactionHash": "0xa45b5cf6afcc447e3612e1ce0b9b710bd9ef50dffc317610f62e346a20f1b5e8",
    "logs": [],
    "blockNumber": 8324761,
    "cumulativeGasUsed": "1806899",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "df1e535ce163b48b761a9723aa06549f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"EmptyCalldata\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"ImmutableFunction\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InValidFacetCutAction\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InitCallFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MustBeZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoCode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoSelectorsInFacet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonEmptyCalldata\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"NonExistentSelector\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotDiamondOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"SameSelectorReplacement\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"SelectorExists\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"indexed\":false,\"internalType\":\"struct IDiamondCut.FacetCut[]\",\"name\":\"_diamondCut\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_init\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"DiamondCut\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondCut.FacetCut[]\",\"name\":\"_diamondCut\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_init\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"diamondCut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"diamondCut((address,uint8,bytes4[])[],address,bytes)\":{\"params\":{\"_calldata\":\"A function call, including function selector and arguments                  _calldata is executed with delegatecall on _init\",\"_diamondCut\":\"Contains the facet addresses and function selectors\",\"_init\":\"The address of the contract or facet to execute _calldata\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"diamondCut((address,uint8,bytes4[])[],address,bytes)\":{\"notice\":\"Add/replace/remove any number of functions and optionally execute         a function with delegatecall\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/DiamondCutFacet.sol\":\"DiamondCutFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/facets/DiamondCutFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IDiamondCut} from \\\"../interfaces/IDiamondCut.sol\\\";\\nimport {LibDiamond} from \\\"../libraries/LibDiamond.sol\\\";\\n\\ncontract DiamondCutFacet is IDiamondCut {\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external override {\\n        LibDiamond.enforceIsContractOwner();\\n        LibDiamond.diamondCut(_diamondCut, _init, _calldata);\\n    }\\n}\\n\",\"keccak256\":\"0x37ff0ee78ab7815b639014799878d9ddd6fd506e70304f06b7cd65450001030e\",\"license\":\"MIT\"},\"contracts/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0x1c180ef68fa675444f89aab807a06eb7983790650dda4f693e05b52e8ff5fe4c\",\"license\":\"MIT\"},\"contracts/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IDiamondCut} from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    error InValidFacetCutAction();\\n    error NotDiamondOwner();\\n    error NoSelectorsInFacet();\\n    error NoZeroAddress();\\n    error SelectorExists(bytes4 selector);\\n    error SameSelectorReplacement(bytes4 selector);\\n    error MustBeZeroAddress();\\n    error NoCode();\\n    error NonExistentSelector(bytes4 selector);\\n    error ImmutableFunction(bytes4 selector);\\n    error NonEmptyCalldata();\\n    error EmptyCalldata();\\n    error InitCallFailed();\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        if (msg.sender != diamondStorage().contractOwner) revert NotDiamondOwner();\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(\\n                    _diamondCut[facetIndex].facetAddress,\\n                    _diamondCut[facetIndex].functionSelectors\\n                );\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(\\n                    _diamondCut[facetIndex].facetAddress,\\n                    _diamondCut[facetIndex].functionSelectors\\n                );\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(\\n                    _diamondCut[facetIndex].facetAddress,\\n                    _diamondCut[facetIndex].functionSelectors\\n                );\\n            } else {\\n                revert InValidFacetCutAction();\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        if (_functionSelectors.length <= 0) revert NoSelectorsInFacet();\\n        DiamondStorage storage ds = diamondStorage();\\n        if (_facetAddress == address(0)) revert NoZeroAddress();\\n        uint96 selectorPosition = uint96(\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.length\\n        );\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            if (oldFacetAddress != address(0)) revert SelectorExists(selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        if (_functionSelectors.length <= 0) revert NoSelectorsInFacet();\\n        DiamondStorage storage ds = diamondStorage();\\n        if (_facetAddress == address(0)) revert NoZeroAddress();\\n        uint96 selectorPosition = uint96(\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.length\\n        );\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            if (oldFacetAddress == _facetAddress) revert SameSelectorReplacement(selector);\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        if (_functionSelectors.length <= 0) revert NoSelectorsInFacet();\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        if (_facetAddress != address(0)) revert MustBeZeroAddress();\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress);\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }\\n\\n    function addFunction(\\n        DiamondStorage storage ds,\\n        bytes4 _selector,\\n        uint96 _selectorPosition,\\n        address _facetAddress\\n    ) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(\\n        DiamondStorage storage ds,\\n        address _facetAddress,\\n        bytes4 _selector\\n    ) internal {\\n        if (_facetAddress == address(0)) revert NonExistentSelector(_selector);\\n        // an immutable function is a function defined directly in a diamond\\n        if (_facetAddress == address(this)) revert ImmutableFunction(_selector);\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds\\n            .selectorToFacetAndPosition[_selector]\\n            .functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds\\n            .facetFunctionSelectors[_facetAddress]\\n            .functionSelectors\\n            .length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[\\n                lastSelectorPosition\\n            ];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[\\n                selectorPosition\\n            ] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(\\n                selectorPosition\\n            );\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds\\n                .facetFunctionSelectors[_facetAddress]\\n                .facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds\\n                    .facetFunctionSelectors[lastFacetAddress]\\n                    .facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            if (_calldata.length > 0) revert NonEmptyCalldata();\\n        } else {\\n            if (_calldata.length == 0) revert EmptyCalldata();\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init);\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert InitCallFailed();\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        if (contractSize <= 0) revert NoCode();\\n    }\\n}\\n\",\"keccak256\":\"0x7022e9c698c22b39b46a705dfcdd31e13edf71dfbcf6b13e0175f65faab111de\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611f7f806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80631f931c1c14610030575b600080fd5b61004a60048036038101906100459190611611565b61004c565b005b6100546100b6565b6100af85859061006491906119af565b8484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610148565b5050505050565b6100be61036e565b60040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610146576040517f3058081000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b60005b8351811015610323576000848281518110610169576101686119c4565b5b60200260200101516020015190506000600281111561018b5761018a6119f3565b5b81600281111561019e5761019d6119f3565b5b036101ee576101e98583815181106101b9576101b86119c4565b5b6020026020010151600001518684815181106101d8576101d76119c4565b5b60200260200101516040015161039b565b61030f565b60016002811115610202576102016119f3565b5b816002811115610215576102146119f3565b5b03610265576102608583815181106102305761022f6119c4565b5b60200260200101516000015186848151811061024f5761024e6119c4565b5b602002602001015160400151610602565b61030e565b600280811115610278576102776119f3565b5b81600281111561028b5761028a6119f3565b5b036102db576102d68583815181106102a6576102a56119c4565b5b6020026020010151600001518684815181106102c5576102c46119c4565b5b602002602001015160400151610873565b61030d565b6040517f062f2eb800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b5b50808061031b90611a5b565b91505061014b565b507f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb67383838360405161035793929190611d61565b60405180910390a161036982826109ec565b505050565b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90508091505090565b60008151116103d6576040517f92d2fe5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006103e061036e565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610448576040517fddbadd5f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008160010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054905090506000816bffffffffffffffffffffffff16036104b5576104b48285610bcb565b5b60005b83518110156105fb5760008482815181106104d6576104d56119c4565b5b602002602001015190506000846000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146105cc57816040517f501e70c70000000000000000000000000000000000000000000000000000000081526004016105c39190611db5565b60405180910390fd5b6105d88583868a610c8d565b83806105e390611de8565b945050505080806105f390611a5b565b9150506104b8565b5050505050565b600081511161063d576040517f92d2fe5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061064761036e565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036106af576040517fddbadd5f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008160010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054905090506000816bffffffffffffffffffffffff160361071c5761071b8285610bcb565b5b60005b835181101561086c57600084828151811061073d5761073c6119c4565b5b602002602001015190506000846000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361083257816040517fe020c4580000000000000000000000000000000000000000000000000000000081526004016108299190611db5565b60405180910390fd5b61083d858284610e3a565b6108498583868a610c8d565b838061085490611de8565b9450505050808061086490611a5b565b91505061071f565b5050505050565b60008151116108ae576040517f92d2fe5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006108b861036e565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610920576040517f6f997f9400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b82518110156109e6576000838281518110610941576109406119c4565b5b602002602001015190506000836000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506109d1848284610e3a565b505080806109de90611a5b565b915050610923565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610a6157600081511115610a5c576040517fc21b1ab700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610bc7565b6000815103610a9c576040517fc047a18400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610ad957610ad8826114a0565b5b6000808373ffffffffffffffffffffffffffffffffffffffff1683604051610b019190611e58565b600060405180830381855af49150503d8060008114610b3c576040519150601f19603f3d011682016040523d82523d6000602084013e610b41565b606091505b509150915081610bc457600081511115610b9257806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b899190611ec4565b60405180910390fd5b6040517f3a18f8dd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505b5050565b610bd4816114a0565b81600201805490508260010160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555081600201819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b81846000016000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055508360010160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018390806001815401808255809150506001900390600052602060002090600891828204019190066004029091909190916101000a81548163ffffffff021916908360e01c021790555080846000016000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610eab57806040517f5205a600000000000000000000000000000000000000000000000000000000008152600401610ea29190611db5565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610f1b57806040517f69731c50000000000000000000000000000000000000000000000000000000008152600401610f129190611db5565b60405180910390fd5b6000836000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff169050600060018560010160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000180549050610ff29190611ee6565b90508082146111865760008560010160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018281548110611053576110526119c4565b5b90600052602060002090600891828204019190066004029054906101000a900460e01b9050808660010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000184815481106110cf576110ce6119c4565b5b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c021790555082866000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550505b8460010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054806111da576111d9611f1a565b5b60019003818190600052602060002090600891828204019190066004026101000a81549063ffffffff02191690559055846000016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a8154906bffffffffffffffffffffffff0219169055505060008103611499576000600186600201805490506112c49190611ee6565b905060008660010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154905081811461140557600087600201838154811061132e5761132d6119c4565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080886002018381548110611372576113716119c4565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818860010160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550505b8660020180548061141957611418611f1a565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590558660010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000905550505b5050505050565b6000813b9050600081116114e0576040517ff046a71400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f84011261151d5761151c6114f8565b5b8235905067ffffffffffffffff81111561153a576115396114fd565b5b60208301915083602082028301111561155657611555611502565b5b9250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006115888261155d565b9050919050565b6115988161157d565b81146115a357600080fd5b50565b6000813590506115b58161158f565b92915050565b60008083601f8401126115d1576115d06114f8565b5b8235905067ffffffffffffffff8111156115ee576115ed6114fd565b5b60208301915083600182028301111561160a57611609611502565b5b9250929050565b60008060008060006060868803121561162d5761162c6114ee565b5b600086013567ffffffffffffffff81111561164b5761164a6114f3565b5b61165788828901611507565b9550955050602061166a888289016115a6565b935050604086013567ffffffffffffffff81111561168b5761168a6114f3565b5b611697888289016115bb565b92509250509295509295909350565b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6116ef826116a6565b810181811067ffffffffffffffff8211171561170e5761170d6116b7565b5b80604052505050565b60006117216114e4565b905061172d82826116e6565b919050565b600067ffffffffffffffff82111561174d5761174c6116b7565b5b602082029050602081019050919050565b600080fd5b600080fd5b6003811061177557600080fd5b50565b60008135905061178781611768565b92915050565b600067ffffffffffffffff8211156117a8576117a76116b7565b5b602082029050602081019050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6117ee816117b9565b81146117f957600080fd5b50565b60008135905061180b816117e5565b92915050565b600061182461181f8461178d565b611717565b9050808382526020820190506020840283018581111561184757611846611502565b5b835b81811015611870578061185c88826117fc565b845260208401935050602081019050611849565b5050509392505050565b600082601f83011261188f5761188e6114f8565b5b813561189f848260208601611811565b91505092915050565b6000606082840312156118be576118bd61175e565b5b6118c86060611717565b905060006118d8848285016115a6565b60008301525060206118ec84828501611778565b602083015250604082013567ffffffffffffffff8111156119105761190f611763565b5b61191c8482850161187a565b60408301525092915050565b600061193b61193684611732565b611717565b9050808382526020820190506020840283018581111561195e5761195d611502565b5b835b818110156119a557803567ffffffffffffffff811115611983576119826114f8565b5b80860161199089826118a8565b85526020850194505050602081019050611960565b5050509392505050565b60006119bc368484611928565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b6000611a6682611a51565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611a9857611a97611a22565b5b600182019050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611ad88161157d565b82525050565b60038110611aef57611aee6119f3565b5b50565b6000819050611b0082611ade565b919050565b6000611b1082611af2565b9050919050565b611b2081611b05565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611b5b816117b9565b82525050565b6000611b6d8383611b52565b60208301905092915050565b6000602082019050919050565b6000611b9182611b26565b611b9b8185611b31565b9350611ba683611b42565b8060005b83811015611bd7578151611bbe8882611b61565b9750611bc983611b79565b925050600181019050611baa565b5085935050505092915050565b6000606083016000830151611bfc6000860182611acf565b506020830151611c0f6020860182611b17565b5060408301518482036040860152611c278282611b86565b9150508091505092915050565b6000611c408383611be4565b905092915050565b6000602082019050919050565b6000611c6082611aa3565b611c6a8185611aae565b935083602082028501611c7c85611abf565b8060005b85811015611cb85784840389528151611c998582611c34565b9450611ca483611c48565b925060208a01995050600181019050611c80565b50829750879550505050505092915050565b611cd38161157d565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611d13578082015181840152602081019050611cf8565b83811115611d22576000848401525b50505050565b6000611d3382611cd9565b611d3d8185611ce4565b9350611d4d818560208601611cf5565b611d56816116a6565b840191505092915050565b60006060820190508181036000830152611d7b8186611c55565b9050611d8a6020830185611cca565b8181036040830152611d9c8184611d28565b9050949350505050565b611daf816117b9565b82525050565b6000602082019050611dca6000830184611da6565b92915050565b60006bffffffffffffffffffffffff82169050919050565b6000611df382611dd0565b91506bffffffffffffffffffffffff8203611e1157611e10611a22565b5b600182019050919050565b600081905092915050565b6000611e3282611cd9565b611e3c8185611e1c565b9350611e4c818560208601611cf5565b80840191505092915050565b6000611e648284611e27565b915081905092915050565b600081519050919050565b600082825260208201905092915050565b6000611e9682611e6f565b611ea08185611e7a565b9350611eb0818560208601611cf5565b611eb9816116a6565b840191505092915050565b60006020820190508181036000830152611ede8184611e8b565b905092915050565b6000611ef182611a51565b9150611efc83611a51565b925082821015611f0f57611f0e611a22565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220d7d8cac1ca4d130af44bb4bf2af6243d4c890f781f44c42704db97ce4761b22264736f6c634300080e0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80631f931c1c14610030575b600080fd5b61004a60048036038101906100459190611611565b61004c565b005b6100546100b6565b6100af85859061006491906119af565b8484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610148565b5050505050565b6100be61036e565b60040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610146576040517f3058081000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b60005b8351811015610323576000848281518110610169576101686119c4565b5b60200260200101516020015190506000600281111561018b5761018a6119f3565b5b81600281111561019e5761019d6119f3565b5b036101ee576101e98583815181106101b9576101b86119c4565b5b6020026020010151600001518684815181106101d8576101d76119c4565b5b60200260200101516040015161039b565b61030f565b60016002811115610202576102016119f3565b5b816002811115610215576102146119f3565b5b03610265576102608583815181106102305761022f6119c4565b5b60200260200101516000015186848151811061024f5761024e6119c4565b5b602002602001015160400151610602565b61030e565b600280811115610278576102776119f3565b5b81600281111561028b5761028a6119f3565b5b036102db576102d68583815181106102a6576102a56119c4565b5b6020026020010151600001518684815181106102c5576102c46119c4565b5b602002602001015160400151610873565b61030d565b6040517f062f2eb800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b5b50808061031b90611a5b565b91505061014b565b507f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb67383838360405161035793929190611d61565b60405180910390a161036982826109ec565b505050565b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90508091505090565b60008151116103d6576040517f92d2fe5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006103e061036e565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610448576040517fddbadd5f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008160010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054905090506000816bffffffffffffffffffffffff16036104b5576104b48285610bcb565b5b60005b83518110156105fb5760008482815181106104d6576104d56119c4565b5b602002602001015190506000846000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146105cc57816040517f501e70c70000000000000000000000000000000000000000000000000000000081526004016105c39190611db5565b60405180910390fd5b6105d88583868a610c8d565b83806105e390611de8565b945050505080806105f390611a5b565b9150506104b8565b5050505050565b600081511161063d576040517f92d2fe5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061064761036e565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036106af576040517fddbadd5f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008160010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054905090506000816bffffffffffffffffffffffff160361071c5761071b8285610bcb565b5b60005b835181101561086c57600084828151811061073d5761073c6119c4565b5b602002602001015190506000846000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361083257816040517fe020c4580000000000000000000000000000000000000000000000000000000081526004016108299190611db5565b60405180910390fd5b61083d858284610e3a565b6108498583868a610c8d565b838061085490611de8565b9450505050808061086490611a5b565b91505061071f565b5050505050565b60008151116108ae576040517f92d2fe5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006108b861036e565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610920576040517f6f997f9400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b82518110156109e6576000838281518110610941576109406119c4565b5b602002602001015190506000836000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506109d1848284610e3a565b505080806109de90611a5b565b915050610923565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610a6157600081511115610a5c576040517fc21b1ab700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610bc7565b6000815103610a9c576040517fc047a18400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610ad957610ad8826114a0565b5b6000808373ffffffffffffffffffffffffffffffffffffffff1683604051610b019190611e58565b600060405180830381855af49150503d8060008114610b3c576040519150601f19603f3d011682016040523d82523d6000602084013e610b41565b606091505b509150915081610bc457600081511115610b9257806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b899190611ec4565b60405180910390fd5b6040517f3a18f8dd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505b5050565b610bd4816114a0565b81600201805490508260010160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555081600201819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b81846000016000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055508360010160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018390806001815401808255809150506001900390600052602060002090600891828204019190066004029091909190916101000a81548163ffffffff021916908360e01c021790555080846000016000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610eab57806040517f5205a600000000000000000000000000000000000000000000000000000000008152600401610ea29190611db5565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610f1b57806040517f69731c50000000000000000000000000000000000000000000000000000000008152600401610f129190611db5565b60405180910390fd5b6000836000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff169050600060018560010160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000180549050610ff29190611ee6565b90508082146111865760008560010160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018281548110611053576110526119c4565b5b90600052602060002090600891828204019190066004029054906101000a900460e01b9050808660010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000184815481106110cf576110ce6119c4565b5b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c021790555082866000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550505b8460010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054806111da576111d9611f1a565b5b60019003818190600052602060002090600891828204019190066004026101000a81549063ffffffff02191690559055846000016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a8154906bffffffffffffffffffffffff0219169055505060008103611499576000600186600201805490506112c49190611ee6565b905060008660010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154905081811461140557600087600201838154811061132e5761132d6119c4565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080886002018381548110611372576113716119c4565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818860010160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550505b8660020180548061141957611418611f1a565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590558660010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000905550505b5050505050565b6000813b9050600081116114e0576040517ff046a71400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f84011261151d5761151c6114f8565b5b8235905067ffffffffffffffff81111561153a576115396114fd565b5b60208301915083602082028301111561155657611555611502565b5b9250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006115888261155d565b9050919050565b6115988161157d565b81146115a357600080fd5b50565b6000813590506115b58161158f565b92915050565b60008083601f8401126115d1576115d06114f8565b5b8235905067ffffffffffffffff8111156115ee576115ed6114fd565b5b60208301915083600182028301111561160a57611609611502565b5b9250929050565b60008060008060006060868803121561162d5761162c6114ee565b5b600086013567ffffffffffffffff81111561164b5761164a6114f3565b5b61165788828901611507565b9550955050602061166a888289016115a6565b935050604086013567ffffffffffffffff81111561168b5761168a6114f3565b5b611697888289016115bb565b92509250509295509295909350565b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6116ef826116a6565b810181811067ffffffffffffffff8211171561170e5761170d6116b7565b5b80604052505050565b60006117216114e4565b905061172d82826116e6565b919050565b600067ffffffffffffffff82111561174d5761174c6116b7565b5b602082029050602081019050919050565b600080fd5b600080fd5b6003811061177557600080fd5b50565b60008135905061178781611768565b92915050565b600067ffffffffffffffff8211156117a8576117a76116b7565b5b602082029050602081019050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6117ee816117b9565b81146117f957600080fd5b50565b60008135905061180b816117e5565b92915050565b600061182461181f8461178d565b611717565b9050808382526020820190506020840283018581111561184757611846611502565b5b835b81811015611870578061185c88826117fc565b845260208401935050602081019050611849565b5050509392505050565b600082601f83011261188f5761188e6114f8565b5b813561189f848260208601611811565b91505092915050565b6000606082840312156118be576118bd61175e565b5b6118c86060611717565b905060006118d8848285016115a6565b60008301525060206118ec84828501611778565b602083015250604082013567ffffffffffffffff8111156119105761190f611763565b5b61191c8482850161187a565b60408301525092915050565b600061193b61193684611732565b611717565b9050808382526020820190506020840283018581111561195e5761195d611502565b5b835b818110156119a557803567ffffffffffffffff811115611983576119826114f8565b5b80860161199089826118a8565b85526020850194505050602081019050611960565b5050509392505050565b60006119bc368484611928565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b6000611a6682611a51565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611a9857611a97611a22565b5b600182019050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611ad88161157d565b82525050565b60038110611aef57611aee6119f3565b5b50565b6000819050611b0082611ade565b919050565b6000611b1082611af2565b9050919050565b611b2081611b05565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611b5b816117b9565b82525050565b6000611b6d8383611b52565b60208301905092915050565b6000602082019050919050565b6000611b9182611b26565b611b9b8185611b31565b9350611ba683611b42565b8060005b83811015611bd7578151611bbe8882611b61565b9750611bc983611b79565b925050600181019050611baa565b5085935050505092915050565b6000606083016000830151611bfc6000860182611acf565b506020830151611c0f6020860182611b17565b5060408301518482036040860152611c278282611b86565b9150508091505092915050565b6000611c408383611be4565b905092915050565b6000602082019050919050565b6000611c6082611aa3565b611c6a8185611aae565b935083602082028501611c7c85611abf565b8060005b85811015611cb85784840389528151611c998582611c34565b9450611ca483611c48565b925060208a01995050600181019050611c80565b50829750879550505050505092915050565b611cd38161157d565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611d13578082015181840152602081019050611cf8565b83811115611d22576000848401525b50505050565b6000611d3382611cd9565b611d3d8185611ce4565b9350611d4d818560208601611cf5565b611d56816116a6565b840191505092915050565b60006060820190508181036000830152611d7b8186611c55565b9050611d8a6020830185611cca565b8181036040830152611d9c8184611d28565b9050949350505050565b611daf816117b9565b82525050565b6000602082019050611dca6000830184611da6565b92915050565b60006bffffffffffffffffffffffff82169050919050565b6000611df382611dd0565b91506bffffffffffffffffffffffff8203611e1157611e10611a22565b5b600182019050919050565b600081905092915050565b6000611e3282611cd9565b611e3c8185611e1c565b9350611e4c818560208601611cf5565b80840191505092915050565b6000611e648284611e27565b915081905092915050565b600081519050919050565b600082825260208201905092915050565b6000611e9682611e6f565b611ea08185611e7a565b9350611eb0818560208601611cf5565b611eb9816116a6565b840191505092915050565b60006020820190508181036000830152611ede8184611e8b565b905092915050565b6000611ef182611a51565b9150611efc83611a51565b925082821015611f0f57611f0e611a22565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220d7d8cac1ca4d130af44bb4bf2af6243d4c890f781f44c42704db97ce4761b22264736f6c634300080e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "diamondCut((address,uint8,bytes4[])[],address,bytes)": {
        "params": {
          "_calldata": "A function call, including function selector and arguments                  _calldata is executed with delegatecall on _init",
          "_diamondCut": "Contains the facet addresses and function selectors",
          "_init": "The address of the contract or facet to execute _calldata"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "diamondCut((address,uint8,bytes4[])[],address,bytes)": {
        "notice": "Add/replace/remove any number of functions and optionally execute         a function with delegatecall"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}