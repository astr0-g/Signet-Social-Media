{
  "address": "0x6E9E166586eAaC6618f556021765e661861F7665",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contractOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_diamondCutFacet",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "EmptyCalldata",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        }
      ],
      "name": "ImmutableFunction",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InValidFacetCutAction",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InitCallFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MustBeZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoCode",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoSelectorsInFacet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NonEmptyCalldata",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        }
      ],
      "name": "NonExistentSelector",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        }
      ],
      "name": "SameSelectorReplacement",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        }
      ],
      "name": "SelectorExists",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xe6f25cc5f938cfcfce275fab2cb5e2be80462fdede86b91916139f83b5a4c98d",
  "receipt": {
    "to": null,
    "from": "0x2F327B602B7d440C107E833481e20cC8E768458c",
    "contractAddress": "0x6E9E166586eAaC6618f556021765e661861F7665",
    "transactionIndex": 0,
    "gasUsed": "1878952",
    "logsBloom": "0x
    "blockHash": "0x97280575fdf52bdd7a47a0a9d5506d8298ef88ef946207b61b08e3ce1ce07fa0",
    "transactionHash": "0xe6f25cc5f938cfcfce275fab2cb5e2be80462fdede86b91916139f83b5a4c98d",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 8324768,
        "transactionHash": "0xe6f25cc5f938cfcfce275fab2cb5e2be80462fdede86b91916139f83b5a4c98d",
        "address": "0x6E9E166586eAaC6618f556021765e661861F7665",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002f327b602b7d440c107e833481e20cc8e768458c"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x97280575fdf52bdd7a47a0a9d5506d8298ef88ef946207b61b08e3ce1ce07fa0"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 8324768,
        "transactionHash": "0xe6f25cc5f938cfcfce275fab2cb5e2be80462fdede86b91916139f83b5a4c98d",
        "address": "0x6E9E166586eAaC6618f556021765e661861F7665",
        "topics": [
          "0x8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb673"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000a040d0ef4520a48fecc33ad7b8c7ef86789dc8740000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000011f931c1c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 1,
        "blockHash": "0x97280575fdf52bdd7a47a0a9d5506d8298ef88ef946207b61b08e3ce1ce07fa0"
      }
    ],
    "blockNumber": 8324768,
    "cumulativeGasUsed": "1878952",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2F327B602B7d440C107E833481e20cC8E768458c",
    "0xa040d0ef4520A48FeCC33ad7B8C7EF86789Dc874"
  ],
  "numDeployments": 1,
  "solcInputHash": "df1e535ce163b48b761a9723aa06549f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_diamondCutFacet\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EmptyCalldata\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"ImmutableFunction\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InValidFacetCutAction\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InitCallFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MustBeZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoCode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoSelectorsInFacet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonEmptyCalldata\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"NonExistentSelector\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"SameSelectorReplacement\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"SelectorExists\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SDiamond.sol\":\"sDiamond\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport {LibDiamond} from \\\"./libraries/LibDiamond.sol\\\";\\r\\nimport {IDiamondCut} from \\\"./interfaces/IDiamondCut.sol\\\";\\r\\n\\r\\ncontract sDiamond {\\r\\n    constructor(address _contractOwner, address _diamondCutFacet) payable {\\r\\n        LibDiamond.setContractOwner(_contractOwner);\\r\\n\\r\\n        // Add the diamondCut external function from the diamondCutFacet\\r\\n        IDiamondCut.FacetCut[] memory cut = new IDiamondCut.FacetCut[](1);\\r\\n        bytes4[] memory functionSelectors = new bytes4[](1);\\r\\n        functionSelectors[0] = IDiamondCut.diamondCut.selector;\\r\\n        cut[0] = IDiamondCut.FacetCut({\\r\\n            facetAddress: _diamondCutFacet,\\r\\n            action: IDiamondCut.FacetCutAction.Add,\\r\\n            functionSelectors: functionSelectors\\r\\n        });\\r\\n        LibDiamond.diamondCut(cut, address(0), \\\"\\\");\\r\\n    }\\r\\n\\r\\n    // Find facet for function that is called and execute the\\r\\n    // function if a facet is found and return any value.\\r\\n    fallback() external payable {\\r\\n        LibDiamond.DiamondStorage storage ds;\\r\\n        bytes32 position = LibDiamond.DIAMOND_STORAGE_POSITION;\\r\\n        // get diamond storage\\r\\n        assembly {\\r\\n            ds.slot := position\\r\\n        }\\r\\n        // get facet from function selector\\r\\n        address facet = ds.selectorToFacetAndPosition[msg.sig].facetAddress;\\r\\n        require(facet != address(0), \\\"Diamond: Function does not exist\\\");\\r\\n        // Execute external function from facet using delegatecall and return any value.\\r\\n        assembly {\\r\\n            // copy function selector and any arguments\\r\\n            calldatacopy(0, 0, calldatasize())\\r\\n            // execute function call using the facet\\r\\n            let result := delegatecall(gas(), facet, 0, calldatasize(), 0, 0)\\r\\n            // get any return value\\r\\n            returndatacopy(0, 0, returndatasize())\\r\\n            // return any return value or error back to the caller\\r\\n            switch result\\r\\n            case 0 {\\r\\n                revert(0, returndatasize())\\r\\n            }\\r\\n            default {\\r\\n                return(0, returndatasize())\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0x8d5cefbfebde9c0b3adc5f83a3687b23d73424d5cc6146f726900137b6e2d746\",\"license\":\"MIT\"},\"contracts/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0x1c180ef68fa675444f89aab807a06eb7983790650dda4f693e05b52e8ff5fe4c\",\"license\":\"MIT\"},\"contracts/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IDiamondCut} from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    error InValidFacetCutAction();\\n    error NotDiamondOwner();\\n    error NoSelectorsInFacet();\\n    error NoZeroAddress();\\n    error SelectorExists(bytes4 selector);\\n    error SameSelectorReplacement(bytes4 selector);\\n    error MustBeZeroAddress();\\n    error NoCode();\\n    error NonExistentSelector(bytes4 selector);\\n    error ImmutableFunction(bytes4 selector);\\n    error NonEmptyCalldata();\\n    error EmptyCalldata();\\n    error InitCallFailed();\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        if (msg.sender != diamondStorage().contractOwner) revert NotDiamondOwner();\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(\\n                    _diamondCut[facetIndex].facetAddress,\\n                    _diamondCut[facetIndex].functionSelectors\\n                );\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(\\n                    _diamondCut[facetIndex].facetAddress,\\n                    _diamondCut[facetIndex].functionSelectors\\n                );\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(\\n                    _diamondCut[facetIndex].facetAddress,\\n                    _diamondCut[facetIndex].functionSelectors\\n                );\\n            } else {\\n                revert InValidFacetCutAction();\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        if (_functionSelectors.length <= 0) revert NoSelectorsInFacet();\\n        DiamondStorage storage ds = diamondStorage();\\n        if (_facetAddress == address(0)) revert NoZeroAddress();\\n        uint96 selectorPosition = uint96(\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.length\\n        );\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            if (oldFacetAddress != address(0)) revert SelectorExists(selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        if (_functionSelectors.length <= 0) revert NoSelectorsInFacet();\\n        DiamondStorage storage ds = diamondStorage();\\n        if (_facetAddress == address(0)) revert NoZeroAddress();\\n        uint96 selectorPosition = uint96(\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.length\\n        );\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            if (oldFacetAddress == _facetAddress) revert SameSelectorReplacement(selector);\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        if (_functionSelectors.length <= 0) revert NoSelectorsInFacet();\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        if (_facetAddress != address(0)) revert MustBeZeroAddress();\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress);\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }\\n\\n    function addFunction(\\n        DiamondStorage storage ds,\\n        bytes4 _selector,\\n        uint96 _selectorPosition,\\n        address _facetAddress\\n    ) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(\\n        DiamondStorage storage ds,\\n        address _facetAddress,\\n        bytes4 _selector\\n    ) internal {\\n        if (_facetAddress == address(0)) revert NonExistentSelector(_selector);\\n        // an immutable function is a function defined directly in a diamond\\n        if (_facetAddress == address(this)) revert ImmutableFunction(_selector);\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds\\n            .selectorToFacetAndPosition[_selector]\\n            .functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds\\n            .facetFunctionSelectors[_facetAddress]\\n            .functionSelectors\\n            .length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[\\n                lastSelectorPosition\\n            ];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[\\n                selectorPosition\\n            ] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(\\n                selectorPosition\\n            );\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds\\n                .facetFunctionSelectors[_facetAddress]\\n                .facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds\\n                    .facetFunctionSelectors[lastFacetAddress]\\n                    .facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            if (_calldata.length > 0) revert NonEmptyCalldata();\\n        } else {\\n            if (_calldata.length == 0) revert EmptyCalldata();\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init);\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert InitCallFailed();\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        if (contractSize <= 0) revert NoCode();\\n    }\\n}\\n\",\"keccak256\":\"0x7022e9c698c22b39b46a705dfcdd31e13edf71dfbcf6b13e0175f65faab111de\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260405162003b4838038062003b48833981810160405281019062000029919062001827565b6200003f82620001f760201b620001671760201c565b6000600167ffffffffffffffff8111156200005f576200005e6200186e565b5b6040519080825280602002602001820160405280156200009c57816020015b6200008862001771565b8152602001906001900390816200007e5790505b5090506000600167ffffffffffffffff811115620000bf57620000be6200186e565b5b604051908082528060200260200182016040528015620000ee5781602001602082028036833780820191505090505b509050631f931c1c60e01b8160008151811062000110576200010f6200189d565b5b60200260200101907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152505060405180606001604052808473ffffffffffffffffffffffffffffffffffffffff168152602001600060028111156200019a5762000199620018cc565b5b81526020018281525082600081518110620001ba57620001b96200189d565b5b6020026020010181905250620001ed82600060405180602001604052806000815250620002d660201b6200023e1760201c565b5050505062001ec8565b6000620002096200054f60201b60201c565b905060008160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050828260040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505050565b60005b8351811015620004fa576000848281518110620002fb57620002fa6200189d565b5b60200260200101516020015190506000600281111562000320576200031f620018cc565b5b816002811115620003365762000335620018cc565b5b036200039657620003908583815181106200035657620003556200189d565b5b6020026020010151600001518684815181106200037857620003776200189d565b5b6020026020010151604001516200057c60201b60201c565b620004e3565b60016002811115620003ad57620003ac620018cc565b5b816002811115620003c357620003c2620018cc565b5b0362000423576200041d858381518110620003e357620003e26200189d565b5b6020026020010151600001518684815181106200040557620004046200189d565b5b6020026020010151604001516200080a60201b60201c565b620004e2565b600280811115620004395762000438620018cc565b5b8160028111156200044f576200044e620018cc565b5b03620004af57620004a98583815181106200046f576200046e6200189d565b5b6020026020010151600001518684815181106200049157620004906200189d565b5b60200260200101516040015162000aaa60201b60201c565b620004e1565b6040517f062f2eb800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b5b508080620004f19062001934565b915050620002d9565b507f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb673838383604051620005309392919062001cb8565b60405180910390a16200054a828262000c3c60201b60201c565b505050565b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90508091505090565b6000815111620005b8576040517f92d2fe5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000620005ca6200054f60201b60201c565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160362000633576040517fddbadd5f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008160010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054905090506000816bffffffffffffffffffffffff1603620006a957620006a8828562000e3060201b60201c565b5b60005b835181101562000803576000848281518110620006ce57620006cd6200189d565b5b602002602001015190506000846000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614620007c757816040517f501e70c7000000000000000000000000000000000000000000000000000000008152600401620007be919062001d14565b60405180910390fd5b620007db8583868a62000efa60201b60201c565b8380620007e89062001d49565b94505050508080620007fa9062001934565b915050620006ac565b5050505050565b600081511162000846576040517f92d2fe5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000620008586200054f60201b60201c565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603620008c1576040517fddbadd5f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008160010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054905090506000816bffffffffffffffffffffffff1603620009375762000936828562000e3060201b60201c565b5b60005b835181101562000aa35760008482815181106200095c576200095b6200189d565b5b602002602001015190506000846000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160362000a5457816040517fe020c45800000000000000000000000000000000000000000000000000000000815260040162000a4b919062001d14565b60405180910390fd5b62000a67858284620010a760201b60201c565b62000a7b8583868a62000efa60201b60201c565b838062000a889062001d49565b9450505050808062000a9a9062001934565b9150506200093a565b5050505050565b600081511162000ae6576040517f92d2fe5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600062000af86200054f60201b60201c565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161462000b61576040517f6f997f9400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b825181101562000c3657600083828151811062000b865762000b856200189d565b5b602002602001015190506000836000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905062000c1e848284620010a760201b60201c565b5050808062000c2d9062001934565b91505062000b64565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160362000cb45760008151111562000cae576040517fc21b1ab700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b62000e2c565b600081510362000cf0576040517fc047a18400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161462000d365762000d35826200172c60201b60201c565b5b6000808373ffffffffffffffffffffffffffffffffffffffff168360405162000d60919062001dc4565b600060405180830381855af49150503d806000811462000d9d576040519150601f19603f3d011682016040523d82523d6000602084013e62000da2565b606091505b50915091508162000e295760008151111562000df757806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000dee919062001e3a565b60405180910390fd5b6040517f3a18f8dd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505b5050565b62000e41816200172c60201b60201c565b81600201805490508260010160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555081600201819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b81846000016000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055508360010160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018390806001815401808255809150506001900390600052602060002090600891828204019190066004029091909190916101000a81548163ffffffff021916908360e01c021790555080846000016000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036200111b57806040517f5205a60000000000000000000000000000000000000000000000000000000000815260040162001112919062001d14565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036200118e57806040517f69731c5000000000000000000000000000000000000000000000000000000000815260040162001185919062001d14565b60405180910390fd5b6000836000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff169050600060018560010160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054905062001267919062001e5e565b9050808214620014025760008560010160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018281548110620012cc57620012cb6200189d565b5b90600052602060002090600891828204019190066004029054906101000a900460e01b9050808660010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000184815481106200134b576200134a6200189d565b5b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c021790555082866000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550505b8460010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000180548062001459576200145862001e99565b5b60019003818190600052602060002090600891828204019190066004026101000a81549063ffffffff02191690559055846000016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a8154906bffffffffffffffffffffffff0219169055505060008103620017255760006001866002018054905062001546919062001e5e565b905060008660010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015490508181146200168e576000876002018381548110620015b457620015b36200189d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080886002018381548110620015fb57620015fa6200189d565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818860010160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550505b86600201805480620016a557620016a462001e99565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590558660010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000905550505b5050505050565b6000813b9050600081116200176d576040517ff046a71400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160006002811115620017b057620017af620018cc565b5b8152602001606081525090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620017ef82620017c2565b9050919050565b6200180181620017e2565b81146200180d57600080fd5b50565b6000815190506200182181620017f6565b92915050565b60008060408385031215620018415762001840620017bd565b5b6000620018518582860162001810565b9250506020620018648582860162001810565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b600062001941826200192a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203620019765762001975620018fb565b5b600182019050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b620019b881620017e2565b82525050565b60038110620019d257620019d1620018cc565b5b50565b6000819050620019e582620019be565b919050565b6000620019f782620019d5565b9050919050565b62001a0981620019ea565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b62001a728162001a3b565b82525050565b600062001a86838362001a67565b60208301905092915050565b6000602082019050919050565b600062001aac8262001a0f565b62001ab8818562001a1a565b935062001ac58362001a2b565b8060005b8381101562001afc57815162001ae0888262001a78565b975062001aed8362001a92565b92505060018101905062001ac9565b5085935050505092915050565b600060608301600083015162001b236000860182620019ad565b50602083015162001b386020860182620019fe565b506040830151848203604086015262001b52828262001a9f565b9150508091505092915050565b600062001b6d838362001b09565b905092915050565b6000602082019050919050565b600062001b8f8262001981565b62001b9b81856200198c565b93508360208202850162001baf856200199d565b8060005b8581101562001bf1578484038952815162001bcf858262001b5f565b945062001bdc8362001b75565b925060208a0199505060018101905062001bb3565b50829750879550505050505092915050565b62001c0e81620017e2565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101562001c5057808201518184015260208101905062001c33565b8381111562001c60576000848401525b50505050565b6000601f19601f8301169050919050565b600062001c848262001c14565b62001c90818562001c1f565b935062001ca281856020860162001c30565b62001cad8162001c66565b840191505092915050565b6000606082019050818103600083015262001cd4818662001b82565b905062001ce5602083018562001c03565b818103604083015262001cf9818462001c77565b9050949350505050565b62001d0e8162001a3b565b82525050565b600060208201905062001d2b600083018462001d03565b92915050565b60006bffffffffffffffffffffffff82169050919050565b600062001d568262001d31565b91506bffffffffffffffffffffffff820362001d775762001d76620018fb565b5b600182019050919050565b600081905092915050565b600062001d9a8262001c14565b62001da6818562001d82565b935062001db881856020860162001c30565b80840191505092915050565b600062001dd2828462001d8d565b915081905092915050565b600081519050919050565b600082825260208201905092915050565b600062001e068262001ddd565b62001e12818562001de8565b935062001e2481856020860162001c30565b62001e2f8162001c66565b840191505092915050565b6000602082019050818103600083015262001e56818462001df9565b905092915050565b600062001e6b826200192a565b915062001e78836200192a565b92508282101562001e8e5762001e8d620018fb565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b611c708062001ed86000396000f3fe60806040523661000b57005b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c9050809150600082600001600080357fffffffff00000000000000000000000000000000000000000000000000000000167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610141576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161013890611637565b60405180910390fd5b3660008037600080366000845af43d6000803e8060008114610162573d6000f35b3d6000fd5b6000610171610464565b905060008160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050828260040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505050565b60005b835181101561041957600084828151811061025f5761025e611657565b5b60200260200101516020015190506000600281111561028157610280611686565b5b81600281111561029457610293611686565b5b036102e4576102df8583815181106102af576102ae611657565b5b6020026020010151600001518684815181106102ce576102cd611657565b5b602002602001015160400151610491565b610405565b600160028111156102f8576102f7611686565b5b81600281111561030b5761030a611686565b5b0361035b5761035685838151811061032657610325611657565b5b60200260200101516000015186848151811061034557610344611657565b5b6020026020010151604001516106f8565b610404565b60028081111561036e5761036d611686565b5b81600281111561038157610380611686565b5b036103d1576103cc85838151811061039c5761039b611657565b5b6020026020010151600001518684815181106103bb576103ba611657565b5b602002602001015160400151610969565b610403565b6040517f062f2eb800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b5b508080610411906116ee565b915050610241565b507f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb67383838360405161044d93929190611a63565b60405180910390a161045f8282610ae2565b505050565b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90508091505090565b60008151116104cc576040517f92d2fe5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006104d6610464565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361053e576040517fddbadd5f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008160010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054905090506000816bffffffffffffffffffffffff16036105ab576105aa8285610cc1565b5b60005b83518110156106f15760008482815181106105cc576105cb611657565b5b602002602001015190506000846000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146106c257816040517f501e70c70000000000000000000000000000000000000000000000000000000081526004016106b99190611ab7565b60405180910390fd5b6106ce8583868a610d83565b83806106d990611aea565b945050505080806106e9906116ee565b9150506105ae565b5050505050565b6000815111610733576040517f92d2fe5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061073d610464565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036107a5576040517fddbadd5f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008160010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054905090506000816bffffffffffffffffffffffff1603610812576108118285610cc1565b5b60005b835181101561096257600084828151811061083357610832611657565b5b602002602001015190506000846000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361092857816040517fe020c45800000000000000000000000000000000000000000000000000000000815260040161091f9190611ab7565b60405180910390fd5b610933858284610f30565b61093f8583868a610d83565b838061094a90611aea565b9450505050808061095a906116ee565b915050610815565b5050505050565b60008151116109a4576040517f92d2fe5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006109ae610464565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610a16576040517f6f997f9400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8251811015610adc576000838281518110610a3757610a36611657565b5b602002602001015190506000836000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050610ac7848284610f30565b50508080610ad4906116ee565b915050610a19565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610b5757600081511115610b52576040517fc21b1ab700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610cbd565b6000815103610b92576040517fc047a18400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610bcf57610bce82611596565b5b6000808373ffffffffffffffffffffffffffffffffffffffff1683604051610bf79190611b5a565b600060405180830381855af49150503d8060008114610c32576040519150601f19603f3d011682016040523d82523d6000602084013e610c37565b606091505b509150915081610cba57600081511115610c8857806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7f9190611bb5565b60405180910390fd5b6040517f3a18f8dd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505b5050565b610cca81611596565b81600201805490508260010160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555081600201819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b81846000016000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055508360010160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018390806001815401808255809150506001900390600052602060002090600891828204019190066004029091909190916101000a81548163ffffffff021916908360e01c021790555080846000016000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610fa157806040517f5205a600000000000000000000000000000000000000000000000000000000008152600401610f989190611ab7565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361101157806040517f69731c500000000000000000000000000000000000000000000000000000000081526004016110089190611ab7565b60405180910390fd5b6000836000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff169050600060018560010160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001805490506110e89190611bd7565b905080821461127c5760008560010160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001828154811061114957611148611657565b5b90600052602060002090600891828204019190066004029054906101000a900460e01b9050808660010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000184815481106111c5576111c4611657565b5b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c021790555082866000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550505b8460010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054806112d0576112cf611c0b565b5b60019003818190600052602060002090600891828204019190066004026101000a81549063ffffffff02191690559055846000016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a8154906bffffffffffffffffffffffff021916905550506000810361158f576000600186600201805490506113ba9190611bd7565b905060008660010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015490508181146114fb57600087600201838154811061142457611423611657565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508088600201838154811061146857611467611657565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818860010160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550505b8660020180548061150f5761150e611c0b565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590558660010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000905550505b5050505050565b6000813b9050600081116115d6576040517ff046a71400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b600082825260208201905092915050565b7f4469616d6f6e643a2046756e6374696f6e20646f6573206e6f74206578697374600082015250565b60006116216020836115da565b915061162c826115eb565b602082019050919050565b6000602082019050818103600083015261165081611614565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b60006116f9826116e4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361172b5761172a6116b5565b5b600182019050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061178d82611762565b9050919050565b61179d81611782565b82525050565b600381106117b4576117b3611686565b5b50565b60008190506117c5826117a3565b919050565b60006117d5826117b7565b9050919050565b6117e5816117ca565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61184c81611817565b82525050565b600061185e8383611843565b60208301905092915050565b6000602082019050919050565b6000611882826117eb565b61188c81856117f6565b935061189783611807565b8060005b838110156118c85781516118af8882611852565b97506118ba8361186a565b92505060018101905061189b565b5085935050505092915050565b60006060830160008301516118ed6000860182611794565b50602083015161190060208601826117dc565b50604083015184820360408601526119188282611877565b9150508091505092915050565b600061193183836118d5565b905092915050565b6000602082019050919050565b600061195182611736565b61195b8185611741565b93508360208202850161196d85611752565b8060005b858110156119a9578484038952815161198a8582611925565b945061199583611939565b925060208a01995050600181019050611971565b50829750879550505050505092915050565b6119c481611782565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611a045780820151818401526020810190506119e9565b83811115611a13576000848401525b50505050565b6000601f19601f8301169050919050565b6000611a35826119ca565b611a3f81856119d5565b9350611a4f8185602086016119e6565b611a5881611a19565b840191505092915050565b60006060820190508181036000830152611a7d8186611946565b9050611a8c60208301856119bb565b8181036040830152611a9e8184611a2a565b9050949350505050565b611ab181611817565b82525050565b6000602082019050611acc6000830184611aa8565b92915050565b60006bffffffffffffffffffffffff82169050919050565b6000611af582611ad2565b91506bffffffffffffffffffffffff8203611b1357611b126116b5565b5b600182019050919050565b600081905092915050565b6000611b34826119ca565b611b3e8185611b1e565b9350611b4e8185602086016119e6565b80840191505092915050565b6000611b668284611b29565b915081905092915050565b600081519050919050565b6000611b8782611b71565b611b9181856115da565b9350611ba18185602086016119e6565b611baa81611a19565b840191505092915050565b60006020820190508181036000830152611bcf8184611b7c565b905092915050565b6000611be2826116e4565b9150611bed836116e4565b925082821015611c0057611bff6116b5565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220b7ddfb0183d178075cedda75621d15e1918212c2b072e7224587b5c4df0f739e64736f6c634300080e0033",
  "deployedBytecode": "0x60806040523661000b57005b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c9050809150600082600001600080357fffffffff00000000000000000000000000000000000000000000000000000000167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610141576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161013890611637565b60405180910390fd5b3660008037600080366000845af43d6000803e8060008114610162573d6000f35b3d6000fd5b6000610171610464565b905060008160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050828260040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505050565b60005b835181101561041957600084828151811061025f5761025e611657565b5b60200260200101516020015190506000600281111561028157610280611686565b5b81600281111561029457610293611686565b5b036102e4576102df8583815181106102af576102ae611657565b5b6020026020010151600001518684815181106102ce576102cd611657565b5b602002602001015160400151610491565b610405565b600160028111156102f8576102f7611686565b5b81600281111561030b5761030a611686565b5b0361035b5761035685838151811061032657610325611657565b5b60200260200101516000015186848151811061034557610344611657565b5b6020026020010151604001516106f8565b610404565b60028081111561036e5761036d611686565b5b81600281111561038157610380611686565b5b036103d1576103cc85838151811061039c5761039b611657565b5b6020026020010151600001518684815181106103bb576103ba611657565b5b602002602001015160400151610969565b610403565b6040517f062f2eb800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b5b508080610411906116ee565b915050610241565b507f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb67383838360405161044d93929190611a63565b60405180910390a161045f8282610ae2565b505050565b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90508091505090565b60008151116104cc576040517f92d2fe5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006104d6610464565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361053e576040517fddbadd5f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008160010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054905090506000816bffffffffffffffffffffffff16036105ab576105aa8285610cc1565b5b60005b83518110156106f15760008482815181106105cc576105cb611657565b5b602002602001015190506000846000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146106c257816040517f501e70c70000000000000000000000000000000000000000000000000000000081526004016106b99190611ab7565b60405180910390fd5b6106ce8583868a610d83565b83806106d990611aea565b945050505080806106e9906116ee565b9150506105ae565b5050505050565b6000815111610733576040517f92d2fe5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061073d610464565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036107a5576040517fddbadd5f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008160010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054905090506000816bffffffffffffffffffffffff1603610812576108118285610cc1565b5b60005b835181101561096257600084828151811061083357610832611657565b5b602002602001015190506000846000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361092857816040517fe020c45800000000000000000000000000000000000000000000000000000000815260040161091f9190611ab7565b60405180910390fd5b610933858284610f30565b61093f8583868a610d83565b838061094a90611aea565b9450505050808061095a906116ee565b915050610815565b5050505050565b60008151116109a4576040517f92d2fe5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006109ae610464565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610a16576040517f6f997f9400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8251811015610adc576000838281518110610a3757610a36611657565b5b602002602001015190506000836000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050610ac7848284610f30565b50508080610ad4906116ee565b915050610a19565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610b5757600081511115610b52576040517fc21b1ab700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610cbd565b6000815103610b92576040517fc047a18400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610bcf57610bce82611596565b5b6000808373ffffffffffffffffffffffffffffffffffffffff1683604051610bf79190611b5a565b600060405180830381855af49150503d8060008114610c32576040519150601f19603f3d011682016040523d82523d6000602084013e610c37565b606091505b509150915081610cba57600081511115610c8857806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7f9190611bb5565b60405180910390fd5b6040517f3a18f8dd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505b5050565b610cca81611596565b81600201805490508260010160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555081600201819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b81846000016000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055508360010160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018390806001815401808255809150506001900390600052602060002090600891828204019190066004029091909190916101000a81548163ffffffff021916908360e01c021790555080846000016000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610fa157806040517f5205a600000000000000000000000000000000000000000000000000000000008152600401610f989190611ab7565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361101157806040517f69731c500000000000000000000000000000000000000000000000000000000081526004016110089190611ab7565b60405180910390fd5b6000836000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff169050600060018560010160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001805490506110e89190611bd7565b905080821461127c5760008560010160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001828154811061114957611148611657565b5b90600052602060002090600891828204019190066004029054906101000a900460e01b9050808660010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000184815481106111c5576111c4611657565b5b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c021790555082866000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550505b8460010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054806112d0576112cf611c0b565b5b60019003818190600052602060002090600891828204019190066004026101000a81549063ffffffff02191690559055846000016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a8154906bffffffffffffffffffffffff021916905550506000810361158f576000600186600201805490506113ba9190611bd7565b905060008660010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015490508181146114fb57600087600201838154811061142457611423611657565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508088600201838154811061146857611467611657565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818860010160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550505b8660020180548061150f5761150e611c0b565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590558660010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000905550505b5050505050565b6000813b9050600081116115d6576040517ff046a71400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b600082825260208201905092915050565b7f4469616d6f6e643a2046756e6374696f6e20646f6573206e6f74206578697374600082015250565b60006116216020836115da565b915061162c826115eb565b602082019050919050565b6000602082019050818103600083015261165081611614565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b60006116f9826116e4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361172b5761172a6116b5565b5b600182019050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061178d82611762565b9050919050565b61179d81611782565b82525050565b600381106117b4576117b3611686565b5b50565b60008190506117c5826117a3565b919050565b60006117d5826117b7565b9050919050565b6117e5816117ca565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61184c81611817565b82525050565b600061185e8383611843565b60208301905092915050565b6000602082019050919050565b6000611882826117eb565b61188c81856117f6565b935061189783611807565b8060005b838110156118c85781516118af8882611852565b97506118ba8361186a565b92505060018101905061189b565b5085935050505092915050565b60006060830160008301516118ed6000860182611794565b50602083015161190060208601826117dc565b50604083015184820360408601526119188282611877565b9150508091505092915050565b600061193183836118d5565b905092915050565b6000602082019050919050565b600061195182611736565b61195b8185611741565b93508360208202850161196d85611752565b8060005b858110156119a9578484038952815161198a8582611925565b945061199583611939565b925060208a01995050600181019050611971565b50829750879550505050505092915050565b6119c481611782565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611a045780820151818401526020810190506119e9565b83811115611a13576000848401525b50505050565b6000601f19601f8301169050919050565b6000611a35826119ca565b611a3f81856119d5565b9350611a4f8185602086016119e6565b611a5881611a19565b840191505092915050565b60006060820190508181036000830152611a7d8186611946565b9050611a8c60208301856119bb565b8181036040830152611a9e8184611a2a565b9050949350505050565b611ab181611817565b82525050565b6000602082019050611acc6000830184611aa8565b92915050565b60006bffffffffffffffffffffffff82169050919050565b6000611af582611ad2565b91506bffffffffffffffffffffffff8203611b1357611b126116b5565b5b600182019050919050565b600081905092915050565b6000611b34826119ca565b611b3e8185611b1e565b9350611b4e8185602086016119e6565b80840191505092915050565b6000611b668284611b29565b915081905092915050565b600081519050919050565b6000611b8782611b71565b611b9181856115da565b9350611ba18185602086016119e6565b611baa81611a19565b840191505092915050565b60006020820190508181036000830152611bcf8184611b7c565b905092915050565b6000611be2826116e4565b9150611bed836116e4565b925082821015611c0057611bff6116b5565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220b7ddfb0183d178075cedda75621d15e1918212c2b072e7224587b5c4df0f739e64736f6c634300080e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}